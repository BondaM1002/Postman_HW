{
	"info": {
		"_postman_id": "5ddb1568-c8e0-4b0b-a911-ec3f5f287a19",
		"name": "Homework_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "2.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"host": true
				}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//check that all parametrs are equal appropriated value\r",
							"const jsonData=pm.response.json();\r",
							"\r",
							"const name = jsonData.name;\r",
							"console.log(\"Print name\", name );\r",
							"\r",
							"const age = parseInt(jsonData.age);\r",
							"console.log(\"Print age\", age);\r",
							"\r",
							"const salary = parseInt(jsonData.salary);\r",
							"console.log(\"Print salary\", salary);\r",
							"\r",
							"pm.test(\"Name is equal Maria\", function(){\r",
							"    pm.expect(name).to.equal(\"Maria\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age is equal 30\", function(){\r",
							"    pm.expect(age).to.equal(30);\r",
							"});\r",
							"\r",
							"//parse request\r",
							"const request_body = request.data\r",
							"console.log(\"Print request\", request_body);\r",
							"\r",
							"//compare response and request values\r",
							"const name_from_request = request_body.name;\r",
							"console.log(\"Print name from request\", name_from_request);\r",
							"\r",
							"pm.test(\"Name is equal name from request\", function(){\r",
							"    pm.expect(name).to.equal(name_from_request);\r",
							"});\r",
							"\r",
							"const age_from_request = parseInt(request_body.age);\r",
							"console.log(\"Print age_from_request\", age_from_request);\r",
							"\r",
							"pm.test(\"Age is equal age from request\", function(){\r",
							"    pm.expect(age).to.equal(age_from_request);\r",
							"});\r",
							"\r",
							"\r",
							"const salary_from_request = parseInt(request_body.salary);\r",
							"console.log(\"Print salary_from_request\", salary_from_request);\r",
							"\r",
							"pm.test(\"Salary in response is equal salary in request\", function(){\r",
							"    pm.expect(salary).to.equal(salary_from_request);\r",
							"});\r",
							"\r",
							"//show family from response\r",
							"const family=jsonData.family;\r",
							"console.log(\"Show family\", family);\r",
							"\r",
							"//check calculation for u_salary_1_5_year\r",
							"const u_salary_1_5_year =jsonData.family.u_salary_1_5_year;\r",
							"console.log(\"Show salary after 1,5 year\", u_salary_1_5_year);\r",
							"\r",
							"pm.test(\"Salary is decreased in 4\",function(){\r",
							"    pm.expect(u_salary_1_5_year).to.equal(salary_from_request * 4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"host": true
				}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maria",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"//parse response and request\r",
							"const jsonData=pm.response.json();\r",
							"\r",
							"const getParams = pm.request.url.query.toObject();\r",
							"console.log(\"Print request\", getParams);\r",
							"\r",
							"// Compare names\r",
							"const nameResp = jsonData.name;\r",
							"console.log(\"Show nameResp\",nameResp);\r",
							"\r",
							"const nameReq = getParams.name;\r",
							"console.log (\"Show nameReq\", nameReq);\r",
							"\r",
							"pm.test(\"Compare names\", function(){\r",
							"    pm.expect(nameResp).to.equal(nameReq);\r",
							"});\r",
							"\r",
							"//Compare ages\r",
							"const ageResp = parseInt(jsonData.age);\r",
							"console.log(\"Show ageResp\", ageResp);\r",
							"\r",
							"const ageReq = parseInt(getParams.age);\r",
							"console.log(\"Show ageReq\", ageReq);\r",
							"\r",
							"pm.test(\"Compare ages\", function(){\r",
							"    pm.expect(ageResp).to.equal(ageReq);\r",
							"})\r",
							"\r",
							"//Compare salary\r",
							"const salaryResp = parseInt(jsonData.salary);\r",
							"console.log(\"Show salaryResp\", salaryResp);\r",
							"\r",
							"const salaryReq = parseInt(getParams.salary);\r",
							"console.log(\"Show salaryReq\", salaryReq);\r",
							"\r",
							"pm.test(\"Compare salary\", function(){\r",
							"    pm.expect(salaryResp).to.equal(salaryReq);\r",
							"});\r",
							"\r",
							"// Show family\r",
							"const family = jsonData.family;\r",
							"console.log(\"Show family\", family);\r",
							"\r",
							"\r",
							"//Check dog\r",
							"const dogObj = jsonData.family.pets.dog;\r",
							"console.log(\"Show dog\", dogObj);\r",
							"\r",
							"pm.test(\"Dog with name\", function(){\r",
							"    pm.expect(dogObj).to.have.property('name');\r",
							"})\r",
							"\r",
							"pm.test(\"Age is presented\", function(){\r",
							"  pm.expect(dogObj).to.have.property('age');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name of the dog is correct\", function () {\r",
							"    pm.expect(dogObj.name).to.equal(\"Luky\");\r",
							"});\r",
							"\r",
							"const dogAge = parseInt(dogObj.age);\r",
							"pm.test(\"Age of the dog is correct\", function(){\r",
							"    pm.expect(dogAge).to.have.equal(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"host": true
				}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Ivan&age=7&salary=0",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "7"
						},
						{
							"key": "salary",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2.4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be okay to process\", function(){\r",
							"\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.not.have.jsonBody(\"error\");\r",
							"\r",
							"});\r",
							"\r",
							"const respBody = pm.response.json();\r",
							"const reqBody = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"Check values\", function(){\r",
							"pm.expect(respBody.name).to.eql(reqBody.name);\r",
							"pm.expect(respBody.age).to.eql(parseInt(reqBody.age));\r",
							"});\r",
							"\r",
							"\r",
							"//Check salary\r",
							"\r",
							"const salaryResp = respBody.salary;\r",
							"console.log(\"Show salary1 from the response\", salaryResp[0]);\r",
							"console.log(\"Show salary2 from the response\", salaryResp[1]);\r",
							"console.log(\"Show salary3 from the response\", salaryResp[2]);\r",
							"\r",
							"const salaryReq = parseInt(reqBody.salary);\r",
							"console.log(\"Show salary from the request\", salaryReq);\r",
							"\r",
							"pm.test(\"Check 0 salary item\", function(){\r",
							"    pm.expect(salaryResp[0]).to.eql(salaryReq);\r",
							"});\r",
							"\r",
							"pm.test(\"Check 1 salary item\", function(){\r",
							"    pm.expect(parseInt(salaryResp[1])).to.eql(salaryReq*2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check 2 salary item\", function(){\r",
							"    pm.expect(parseInt(salaryResp[2])).to.eql(salaryReq*3);\r",
							"});\r",
							"\r",
							"//Set env variables\r",
							"pm.environment.set(\"name\", respBody.name);\r",
							"pm.environment.set(\"age\", parseInt(respBody.age));\r",
							"pm.environment.set(\"salary1\", parseInt(salaryResp[0]));\r",
							"pm.environment.set(\"salary2\", parseInt(salaryResp[1]));\r",
							"pm.environment.set(\"salary3\", parseInt(salaryResp[2]));\r",
							"\r",
							"\r",
							"//Show salary in console\r",
							"var i =0;\r",
							"while (i<3){\r",
							"    console.log(\"Salary is\",salaryResp[i])\r",
							"    i++\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"host": true
				}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Rose&age=65&salary=130",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Rose"
						},
						{
							"key": "age",
							"value": "65"
						},
						{
							"key": "salary",
							"value": "130"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2.5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)}\r",
							");\r",
							"\r",
							"var respBody =  pm.response.json();\r",
							"console.log(\"Show respBody\",respBody);\r",
							"\r",
							"var reqBody = request.data;\r",
							"console.log(\"Show reqBody\", reqBody);\r",
							"\r",
							"pm.test(\"Check parametrs in the response\", function(){\r",
							"    pm.expect(respBody).to.have.property(\"start_qa_salary\");\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_6_months\");\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_12_months\");\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"    pm.expect(respBody).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"    pm.expect(respBody).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"var start_qa_salary = parseInt(respBody.start_qa_salary);\r",
							"\r",
							"pm.test(\"Check start_salary\", function(){\r",
							"    pm.expect(start_qa_salary).to.be.equal(parseInt(reqBody.salary))\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_6_months\", function(){\r",
							"    pm.expect(parseInt(respBody.qa_salary_after_6_months)).to.be.equal(parseInt(reqBody.salary)*2)\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months\", function(){\r",
							"    pm.expect(parseInt(respBody.qa_salary_after_12_months)).to.be.equal(parseInt(reqBody.salary)*2.7)\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(parseInt(respBody[\"qa_salary_after_1.5_year\"])).to.be.equal(parseInt(reqBody.salary)*3.3)\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after3.5_year\", function(){\r",
							"    pm.expect(parseInt(respBody[\"qa_salary_after_3.5_years\"])).to.be.equal(parseInt(reqBody.salary)*3.8)\r",
							"});\r",
							"\r",
							"pm.test(\"Check u object\", function(){\r",
							"    pm.expect(respBody.person.u_name[1]).to.be.equal(parseInt(reqBody.salary))\r",
							"    pm.expect(respBody.person.u_name[2]).to.be.equal(parseInt(reqBody.age))\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check u_salary_5_years \", function(){\r",
							"    pm.expect(respBody.person.u_salary_5_years ).to.be.equal(parseInt(reqBody.salary)*4.2)\r",
							"});\r",
							"\r",
							"\r",
							"const personResp = respBody.person;\r",
							"var i = 0;\r",
							"while(i<3){\r",
							"    console.log(\"person_element is\", personResp.u_name[i]);\r",
							"    i++;\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"host": true
				}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}